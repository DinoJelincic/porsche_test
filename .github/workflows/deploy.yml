name: Deploy to AWS

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      BASTION_PUBLIC_KEY: ${{ secrets.BASTION_PUBLIC_KEY }}
      EC2_PUBLIC_KEY: ${{ secrets.EC2_PUBLIC_KEY }}
      BASTION_PRIVATE_KEY: ${{ secrets.BASTION_PRIVATE_KEY }}
      EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
      IMAGE_TAG: ${{ github.sha }}
      AWS_REGION: eu-central-1
      AWS_ROLE: ${{ secrets.AWS_ROLE }} 
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }} 
      ECR_REPOSITORY: porsche_ecr

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install -r app/requirements.txt

      - name: Run ruff linter
        run: ruff app/

      - name: Check if app folder changed
        id: file_check
        run: |
          git fetch origin main --depth=2
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          echo "Changed files: $CHANGED_FILES"
          if echo "$CHANGED_FILES" | grep -q "^app/"; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: GitHubActionsSession

      - name: Login to Amazon ECR
        if: steps.file_check.outputs.changed == 'true'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker image
        if: steps.file_check.outputs.changed == 'true'
        run: docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app

      - name: Push Docker image to ECR
        if: steps.file_check.outputs.changed == 'true'
        run: docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Run Terraform
        if: steps.file_check.outputs.changed == 'true'
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve \
            -var="bastion_public_key=$BASTION_PUBLIC_KEY" \
            -var="ec2_public_key=$EC2_PUBLIC_KEY"

      - name: Setup SSH keys
        if: steps.file_check.outputs.changed == 'true'
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.BASTION_PRIVATE_KEY }}" > ~/.ssh/bastion_key
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/bastion_key ~/.ssh/ec2_key

      - name: Configure SSH config
        if: steps.file_check.outputs.changed == 'true'
        run: |
          echo "
          Host bastion
              HostName 18.157.157.171
              User ubuntu
              IdentityFile ~/.ssh/bastion_key
              StrictHostKeyChecking no

          Host private-ec2
              HostName 10.10.100.63
              User ubuntu
              IdentityFile ~/.ssh/ec2_key
              ProxyJump bastion
              StrictHostKeyChecking no
          " >> ~/.ssh/config

      - name: Warm up private EC2 connection via bastion
        if: steps.file_check.outputs.changed == 'true'
        run: ssh private-ec2 exit

      - name: Deploy to private EC2 via bastion
        if: steps.file_check.outputs.changed == 'true'
        run: |
          ssh private-ec2 << EOF
            echo "Login to ECR"
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            echo "IMAGE_TAG=$IMAGE_TAG" > /home/ubuntu/porsche/.env
            cd /home/ubuntu/porsche
            docker-compose pull
            docker-compose up -d
          EOF